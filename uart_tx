library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity uart_tx is
    generic(
        g_count_clk : integer := 24_000_000/115200
    );
   
    Port (
        clk         : in  STD_LOGIC;
        rst         : in  STD_LOGIC;
        trig        : in  STD_LOGIC;
        tx_active   : out STD_LOGIC;
        tx_done     : out STD_LOGIC;
        parity_en   : IN  std_logic := '1';    -- Enable parity
        parity_type : IN  std_logic := '0';    -- '0' for even, '1' for odd
        tx_data_in  : in  STD_LOGIC_Vector(7 downto 0);
        tx_out      : out STD_LOGIC
    );
end uart_tx;

architecture Behavioral of uart_tx is
   
    type state_type is (IDLE, UART_START, UART_SEND_DATA, UART_PARITY, UART_STOP, CLEAN_UP);
   
    signal r_state : state_type := IDLE;
    signal count   : integer range 0 to g_count_clk - 1 := 0;
    signal tx_data_buff : STD_LOGIC_Vector(7 downto 0) := (others => '0');
    signal r_index : integer range 0 to 8 := 0;
    signal data_transmitting : std_logic := '0';
    signal r_tx_done : std_logic := '0';
   
    -- Timing constants
    constant c_half_bit : integer := g_count_clk/2;
    constant c_bit_time : integer := g_count_clk-1;
   
    -- Parity calculation signals
    signal calculated_parity : std_logic := '0';
   
begin
   
    process(clk, rst)
    begin
        if rising_edge(clk) then
            if rst = '1' then
                -- Reset all signals
                tx_out <= '1';
                count <= 0;
                tx_active <= '0';
                r_index <= 0;
                r_tx_done <= '0';
               
            else
                case r_state is
                   
                    when IDLE =>
                        tx_out <= '1';
                        count <= 0;
                        tx_active <= '0';
                        r_index <= 0;
                        r_tx_done <= '0';
                       
                        if trig = '1' then
                            tx_data_buff <= tx_data_in;
                            r_state <= UART_START;
                        end if;
                       
                    when UART_START =>
                        tx_out <= '0';
                        tx_active <= '1';
                       
                        if count = c_bit_time then
                            count <= 0;
                            r_state <= UART_SEND_DATA;
                        else
                            count <= count + 1;
                        end if;
                       
                    when UART_SEND_DATA =>
                        -- Send data bits (LSB first)
                        tx_out <= tx_data_buff(7-r_index);
                       
                        if count = c_bit_time then
                            count <= 0;
                           
                            if r_index < 8 then
                                r_index <= r_index + 1;
                            else
                                r_state <= UART_PARITY;
                            end if;
                        else
                            count <= count + 1;
                        end if;
                       
                    when UART_PARITY =>
                        if parity_en = '1' then
                            -- Send calculated parity bit
                            tx_out <= calculated_parity;
                        else
                            -- Send dummy parity bit
                            tx_out <= '0';
                        end if;
                       
                        if count = c_bit_time then
                            count <= 0;
                            r_state <= UART_STOP;
                        else
                            count <= count + 1;
                        end if;
                       
                    when UART_STOP =>
                        tx_out <= '1';  -- Stop bit
                       
                        if count = c_bit_time then
                            count <= 0;
                            r_tx_done <= '1';
                            r_state <= CLEAN_UP;
                        else
                            count <= count + 1;
                        end if;
                       
                    when CLEAN_UP =>
                        tx_active <= '0';
                        r_state <= IDLE;
                       
                end case;
            end if;
        end if;
    end process;

    -- Parity calculation process
    process(tx_data_buff, parity_en, parity_type)
    begin
        if parity_en = '1' then
            calculated_parity <= '0';
           
            -- Calculate parity bit-by-bit
            for i in 0 to 7 loop
                calculated_parity <= calculated_parity xor tx_data_buff(i);
            end loop;
           
            -- Set parity type
            if parity_type = '0' then  -- Even parity
                calculated_parity <= calculated_parity;
            else  -- Odd parity
                calculated_parity <= not calculated_parity;
            end if;
        end if;
    end process;

    -- Output assignments
    tx_done <= r_tx_done;

end Behavioral;
